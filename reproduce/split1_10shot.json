{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.10.0\nMMCV: 1.6.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.24.0+8d3363e", "config": "img_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_multi_pipelines = dict(\n    query=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations', with_bbox=True),\n        dict(\n            type='Resize',\n            img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),\n                       (1333, 608), (1333, 640), (1333, 672), (1333, 704),\n                       (1333, 736), (1333, 768), (1333, 800)],\n            keep_ratio=True,\n            multiscale_mode='value'),\n        dict(type='RandomFlip', flip_ratio=0.5),\n        dict(\n            type='Normalize',\n            mean=[103.53, 116.28, 123.675],\n            std=[1.0, 1.0, 1.0],\n            to_rgb=False),\n        dict(type='Pad', size_divisor=32),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n    ],\n    support=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations', with_bbox=True),\n        dict(\n            type='Normalize',\n            mean=[103.53, 116.28, 123.675],\n            std=[1.0, 1.0, 1.0],\n            to_rgb=False),\n        dict(type='GenerateMask', target_size=(224, 224)),\n        dict(type='RandomFlip', flip_ratio=0.0),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n    ])\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata_root = 'data/VOCdevkit/'\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='NWayKShotDataset',\n        num_support_ways=20,\n        num_support_shots=1,\n        one_support_shot_per_image=False,\n        num_used_support_shots=30,\n        save_dataset=True,\n        dataset=dict(\n            type='FewShotVOCDefaultDataset',\n            ann_cfg=[dict(method='MetaRCNN', setting='SPLIT1_10SHOT')],\n            img_prefix='data/VOCdevkit/',\n            multi_pipelines=dict(\n                query=[\n                    dict(type='LoadImageFromFile'),\n                    dict(type='LoadAnnotations', with_bbox=True),\n                    dict(\n                        type='Resize',\n                        img_scale=[(1333, 480), (1333, 512), (1333, 544),\n                                   (1333, 576), (1333, 608), (1333, 640),\n                                   (1333, 672), (1333, 704), (1333, 736),\n                                   (1333, 768), (1333, 800)],\n                        keep_ratio=True,\n                        multiscale_mode='value'),\n                    dict(type='RandomFlip', flip_ratio=0.5),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n                ],\n                support=[\n                    dict(type='LoadImageFromFile'),\n                    dict(type='LoadAnnotations', with_bbox=True),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='GenerateMask', target_size=(224, 224)),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n                ]),\n            classes='ALL_CLASSES_SPLIT1',\n            use_difficult=False,\n            instance_wise=False,\n            dataset_name='query_support_dataset',\n            num_novel_shots=10,\n            num_base_shots=10)),\n    val=dict(\n        type='FewShotVOCDataset',\n        ann_cfg=[\n            dict(\n                type='ann_file',\n                ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/test.txt')\n        ],\n        img_prefix='data/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes='ALL_CLASSES_SPLIT1'),\n    test=dict(\n        type='FewShotVOCDataset',\n        ann_cfg=[\n            dict(\n                type='ann_file',\n                ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/test.txt')\n        ],\n        img_prefix='data/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        test_mode=True,\n        classes='ALL_CLASSES_SPLIT1'),\n    model_init=dict(\n        copy_from_train_dataset=True,\n        samples_per_gpu=16,\n        workers_per_gpu=1,\n        type='FewShotVOCDataset',\n        ann_cfg=None,\n        img_prefix='data/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='GenerateMask', target_size=(224, 224)),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        use_difficult=False,\n        instance_wise=True,\n        num_novel_shots=None,\n        classes='ALL_CLASSES_SPLIT1',\n        dataset_name='model_init_dataset'))\nevaluation = dict(\n    interval=2000,\n    metric='mAP',\n    class_splits=['BASE_CLASSES_SPLIT1', 'NOVEL_CLASSES_SPLIT1'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup=None,\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[60000, 80000])\nrunner = dict(type='IterBasedRunner', max_iters=2000)\nnorm_cfg = dict(type='BN', requires_grad=False)\npretrained = 'open-mmlab://detectron2/resnet101_caffe'\nmodel = dict(\n    type='VFA',\n    pretrained='open-mmlab://detectron2/resnet101_caffe',\n    backbone=dict(\n        type='ResNetWithMetaConv',\n        depth=101,\n        num_stages=3,\n        strides=(1, 2, 2),\n        dilations=(1, 1, 1),\n        out_indices=(2, ),\n        frozen_stages=2,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=1024,\n        feat_channels=512,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[2, 4, 8, 16, 32],\n            ratios=[0.5, 1.0, 2.0],\n            scale_major=False,\n            strides=[16]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='VFARoIHead',\n        shared_head=dict(\n            type='MetaRCNNResLayer',\n            pretrained='open-mmlab://detectron2/resnet101_caffe',\n            depth=50,\n            stage=3,\n            stride=2,\n            dilation=1,\n            style='caffe',\n            norm_cfg=dict(type='BN', requires_grad=False),\n            norm_eval=True),\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=1024,\n            featmap_strides=[16]),\n        bbox_head=dict(\n            type='VFABBoxHead',\n            with_avg_pool=False,\n            roi_feat_size=1,\n            in_channels=2048,\n            num_classes=20,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='SmoothL1Loss', loss_weight=1.0),\n            num_meta_classes=20,\n            meta_cls_in_channels=2048,\n            with_meta_cls_loss=True,\n            loss_meta=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        aggregation_layer=dict(\n            type='AggregationLayer',\n            aggregator_cfgs=[\n                dict(\n                    type='DotProductAggregator',\n                    in_channels=2048,\n                    with_fc=False)\n            ]),\n        novel_class=(15, 16, 17, 18, 19),\n        base_class=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),\n        num_novel=5),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=12000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=128,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=6000,\n            max_per_img=300,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.3),\n            max_per_img=100)),\n    frozen_parameters=[\n        'backbone', 'shared_head', 'aggregation_layer', 'rpn_head'\n    ])\ncustom_imports = dict(\n    imports=['vfa.vfa_detector', 'vfa.vfa_roi_head', 'vfa.vfa_bbox_head'],\n    allow_failed_imports=False)\ncheckpoint_config = dict(interval=2000)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'work_dirs/vfa_r101_c4_8xb4_voc-split1_base-training/iter_18000.pth'\nresume_from = None\nworkflow = [('train', 1)]\nuse_infinite_sampler = True\nseed = 42\nwork_dir = './work_dirs/vfa_r101_c4_8xb4_voc-split1_10shot-fine-tuning'\ngpu_ids = range(0, 1)\n", "seed": 42, "exp_name": "vfa_r101_c4_8xb4_voc-split1_10shot-fine-tuning.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.001, "memory": 2010, "data_time": 0.0471, "loss_rpn_cls": 0.05724, "loss_rpn_bbox": 0.07271, "loss_cls": 1.06809, "loss_bbox": 0.42774, "acc": 77.8125, "loss_meta_cls": 0.15056, "meta_acc": 5.6, "loss_vae": 0.04684, "loss": 1.82318, "time": 0.32298}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.001, "memory": 2010, "data_time": 0.04106, "loss_rpn_cls": 0.06933, "loss_rpn_bbox": 0.07892, "loss_cls": 0.6242, "loss_bbox": 0.39927, "acc": 82.94141, "loss_meta_cls": 0.14863, "meta_acc": 7.7, "loss_vae": 0.04702, "loss": 1.36737, "time": 0.25955}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.001, "memory": 2010, "data_time": 0.0421, "loss_rpn_cls": 0.06177, "loss_rpn_bbox": 0.08284, "loss_cls": 0.51668, "loss_bbox": 0.37544, "acc": 85.09766, "loss_meta_cls": 0.14705, "meta_acc": 8.7, "loss_vae": 0.04702, "loss": 1.23079, "time": 0.25595}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "memory": 2010, "data_time": 0.04213, "loss_rpn_cls": 0.06445, "loss_rpn_bbox": 0.08664, "loss_cls": 0.44268, "loss_bbox": 0.34818, "acc": 87.49609, "loss_meta_cls": 0.14611, "meta_acc": 9.4, "loss_vae": 0.04672, "loss": 1.13478, "time": 0.25469}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.001, "memory": 2010, "data_time": 0.044, "loss_rpn_cls": 0.05592, "loss_rpn_bbox": 0.07764, "loss_cls": 0.39667, "loss_bbox": 0.33601, "acc": 88.82422, "loss_meta_cls": 0.14492, "meta_acc": 11.0, "loss_vae": 0.04698, "loss": 1.05814, "time": 0.25997}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.001, "memory": 2010, "data_time": 0.04374, "loss_rpn_cls": 0.07162, "loss_rpn_bbox": 0.08618, "loss_cls": 0.34173, "loss_bbox": 0.30657, "acc": 90.64453, "loss_meta_cls": 0.14414, "meta_acc": 11.0, "loss_vae": 0.04684, "loss": 0.99707, "time": 0.25623}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.001, "memory": 2010, "data_time": 0.04292, "loss_rpn_cls": 0.05715, "loss_rpn_bbox": 0.08286, "loss_cls": 0.31496, "loss_bbox": 0.28225, "acc": 91.34766, "loss_meta_cls": 0.14373, "meta_acc": 10.4, "loss_vae": 0.04659, "loss": 0.92755, "time": 0.26331}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.001, "memory": 2010, "data_time": 0.04131, "loss_rpn_cls": 0.04926, "loss_rpn_bbox": 0.08295, "loss_cls": 0.28516, "loss_bbox": 0.275, "acc": 92.19531, "loss_meta_cls": 0.14313, "meta_acc": 9.7, "loss_vae": 0.04672, "loss": 0.88221, "time": 0.25516}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.001, "memory": 2010, "data_time": 0.04397, "loss_rpn_cls": 0.0648, "loss_rpn_bbox": 0.08559, "loss_cls": 0.27685, "loss_bbox": 0.25752, "acc": 92.08984, "loss_meta_cls": 0.14236, "meta_acc": 11.2, "loss_vae": 0.04678, "loss": 0.87391, "time": 0.25977}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.001, "memory": 2010, "data_time": 0.04212, "loss_rpn_cls": 0.05401, "loss_rpn_bbox": 0.06755, "loss_cls": 0.24951, "loss_bbox": 0.24159, "acc": 93.125, "loss_meta_cls": 0.14235, "meta_acc": 10.5, "loss_vae": 0.04645, "loss": 0.80146, "time": 0.25655}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 2010, "data_time": 0.04316, "loss_rpn_cls": 0.05509, "loss_rpn_bbox": 0.07453, "loss_cls": 0.24231, "loss_bbox": 0.22436, "acc": 93.125, "loss_meta_cls": 0.14141, "meta_acc": 12.6, "loss_vae": 0.0467, "loss": 0.78439, "time": 0.25825}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 2010, "data_time": 0.04351, "loss_rpn_cls": 0.06551, "loss_rpn_bbox": 0.08057, "loss_cls": 0.2339, "loss_bbox": 0.22266, "acc": 92.98438, "loss_meta_cls": 0.14101, "meta_acc": 12.8, "loss_vae": 0.04644, "loss": 0.7901, "time": 0.25745}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 2010, "data_time": 0.0433, "loss_rpn_cls": 0.05229, "loss_rpn_bbox": 0.08333, "loss_cls": 0.22814, "loss_bbox": 0.20123, "acc": 93.44531, "loss_meta_cls": 0.14029, "meta_acc": 12.5, "loss_vae": 0.04653, "loss": 0.7518, "time": 0.25732}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 2010, "data_time": 0.0419, "loss_rpn_cls": 0.04521, "loss_rpn_bbox": 0.07899, "loss_cls": 0.21219, "loss_bbox": 0.1898, "acc": 93.8125, "loss_meta_cls": 0.14025, "meta_acc": 10.8, "loss_vae": 0.04655, "loss": 0.713, "time": 0.25564}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 2010, "data_time": 0.0415, "loss_rpn_cls": 0.0566, "loss_rpn_bbox": 0.07117, "loss_cls": 0.20821, "loss_bbox": 0.18394, "acc": 93.77344, "loss_meta_cls": 0.14004, "meta_acc": 12.2, "loss_vae": 0.04629, "loss": 0.70626, "time": 0.25267}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 2010, "data_time": 0.0425, "loss_rpn_cls": 0.06647, "loss_rpn_bbox": 0.08145, "loss_cls": 0.19974, "loss_bbox": 0.17341, "acc": 93.60156, "loss_meta_cls": 0.1393, "meta_acc": 12.0, "loss_vae": 0.04657, "loss": 0.70694, "time": 0.25614}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.001, "memory": 2010, "data_time": 0.04219, "loss_rpn_cls": 0.04464, "loss_rpn_bbox": 0.07884, "loss_cls": 0.20345, "loss_bbox": 0.16658, "acc": 93.69922, "loss_meta_cls": 0.13953, "meta_acc": 10.8, "loss_vae": 0.04657, "loss": 0.6796, "time": 0.25812}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 2010, "data_time": 0.0439, "loss_rpn_cls": 0.06109, "loss_rpn_bbox": 0.07933, "loss_cls": 0.19492, "loss_bbox": 0.15652, "acc": 93.89453, "loss_meta_cls": 0.13905, "meta_acc": 12.6, "loss_vae": 0.0463, "loss": 0.67721, "time": 0.26134}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.001, "memory": 2010, "data_time": 0.04072, "loss_rpn_cls": 0.0644, "loss_rpn_bbox": 0.08191, "loss_cls": 0.19214, "loss_bbox": 0.15571, "acc": 93.91406, "loss_meta_cls": 0.13871, "meta_acc": 11.6, "loss_vae": 0.04642, "loss": 0.67928, "time": 0.25203}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 2010, "data_time": 0.04149, "loss_rpn_cls": 0.05117, "loss_rpn_bbox": 0.06876, "loss_cls": 0.18274, "loss_bbox": 0.1428, "acc": 94.35156, "loss_meta_cls": 0.13841, "meta_acc": 12.6, "loss_vae": 0.04635, "loss": 0.63023, "time": 0.25296}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.001, "memory": 2010, "data_time": 0.04057, "loss_rpn_cls": 0.05479, "loss_rpn_bbox": 0.07917, "loss_cls": 0.17705, "loss_bbox": 0.13842, "acc": 94.25391, "loss_meta_cls": 0.13855, "meta_acc": 12.3, "loss_vae": 0.04623, "loss": 0.63422, "time": 0.25066}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 2010, "data_time": 0.04121, "loss_rpn_cls": 0.05628, "loss_rpn_bbox": 0.075, "loss_cls": 0.18206, "loss_bbox": 0.13756, "acc": 94.125, "loss_meta_cls": 0.13821, "meta_acc": 11.9, "loss_vae": 0.04645, "loss": 0.63555, "time": 0.25263}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.001, "memory": 2010, "data_time": 0.04252, "loss_rpn_cls": 0.05161, "loss_rpn_bbox": 0.07754, "loss_cls": 0.17251, "loss_bbox": 0.12355, "acc": 94.39844, "loss_meta_cls": 0.13796, "meta_acc": 13.1, "loss_vae": 0.04598, "loss": 0.60915, "time": 0.25848}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 2010, "data_time": 0.04151, "loss_rpn_cls": 0.05973, "loss_rpn_bbox": 0.08113, "loss_cls": 0.18125, "loss_bbox": 0.1259, "acc": 94.00391, "loss_meta_cls": 0.13735, "meta_acc": 12.3, "loss_vae": 0.04632, "loss": 0.63168, "time": 0.25511}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.001, "memory": 2010, "data_time": 0.04148, "loss_rpn_cls": 0.04976, "loss_rpn_bbox": 0.07226, "loss_cls": 0.17064, "loss_bbox": 0.11539, "acc": 94.62109, "loss_meta_cls": 0.13805, "meta_acc": 12.4, "loss_vae": 0.04624, "loss": 0.59234, "time": 0.25527}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.001, "memory": 2010, "data_time": 0.04231, "loss_rpn_cls": 0.05464, "loss_rpn_bbox": 0.07344, "loss_cls": 0.1704, "loss_bbox": 0.12095, "acc": 94.22266, "loss_meta_cls": 0.1374, "meta_acc": 12.1, "loss_vae": 0.0461, "loss": 0.60293, "time": 0.25684}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.001, "memory": 2010, "data_time": 0.04171, "loss_rpn_cls": 0.06322, "loss_rpn_bbox": 0.07691, "loss_cls": 0.17135, "loss_bbox": 0.11758, "acc": 94.25, "loss_meta_cls": 0.13694, "meta_acc": 12.2, "loss_vae": 0.04631, "loss": 0.61231, "time": 0.25543}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.001, "memory": 2010, "data_time": 0.0407, "loss_rpn_cls": 0.07377, "loss_rpn_bbox": 0.08288, "loss_cls": 0.16774, "loss_bbox": 0.1133, "acc": 94.57031, "loss_meta_cls": 0.13731, "meta_acc": 12.3, "loss_vae": 0.04622, "loss": 0.62122, "time": 0.24983}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.001, "memory": 2010, "data_time": 0.0411, "loss_rpn_cls": 0.05829, "loss_rpn_bbox": 0.07118, "loss_cls": 0.16333, "loss_bbox": 0.11184, "acc": 94.34766, "loss_meta_cls": 0.13719, "meta_acc": 12.8, "loss_vae": 0.04605, "loss": 0.58788, "time": 0.24926}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.001, "memory": 2010, "data_time": 0.03987, "loss_rpn_cls": 0.0497, "loss_rpn_bbox": 0.06141, "loss_cls": 0.16432, "loss_bbox": 0.10818, "acc": 94.54297, "loss_meta_cls": 0.13673, "meta_acc": 12.5, "loss_vae": 0.0461, "loss": 0.56643, "time": 0.24659}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.001, "memory": 2010, "data_time": 0.04058, "loss_rpn_cls": 0.05347, "loss_rpn_bbox": 0.06856, "loss_cls": 0.1599, "loss_bbox": 0.10214, "acc": 94.75781, "loss_meta_cls": 0.13652, "meta_acc": 12.6, "loss_vae": 0.0461, "loss": 0.56669, "time": 0.25019}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.001, "memory": 2010, "data_time": 0.04225, "loss_rpn_cls": 0.06727, "loss_rpn_bbox": 0.09006, "loss_cls": 0.15968, "loss_bbox": 0.10123, "acc": 94.69922, "loss_meta_cls": 0.13644, "meta_acc": 13.4, "loss_vae": 0.04587, "loss": 0.60055, "time": 0.25616}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.001, "memory": 2010, "data_time": 0.04071, "loss_rpn_cls": 0.06497, "loss_rpn_bbox": 0.07915, "loss_cls": 0.16106, "loss_bbox": 0.09967, "acc": 94.50781, "loss_meta_cls": 0.13663, "meta_acc": 12.8, "loss_vae": 0.04615, "loss": 0.58763, "time": 0.249}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.001, "memory": 2010, "data_time": 0.04042, "loss_rpn_cls": 0.06149, "loss_rpn_bbox": 0.08113, "loss_cls": 0.1594, "loss_bbox": 0.1001, "acc": 94.38672, "loss_meta_cls": 0.13628, "meta_acc": 13.3, "loss_vae": 0.04572, "loss": 0.58412, "time": 0.25011}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.001, "memory": 2010, "data_time": 0.03998, "loss_rpn_cls": 0.05598, "loss_rpn_bbox": 0.06855, "loss_cls": 0.15383, "loss_bbox": 0.0963, "acc": 94.8125, "loss_meta_cls": 0.1358, "meta_acc": 13.2, "loss_vae": 0.0461, "loss": 0.55656, "time": 0.24864}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.001, "memory": 2010, "data_time": 0.04105, "loss_rpn_cls": 0.05465, "loss_rpn_bbox": 0.07703, "loss_cls": 0.15961, "loss_bbox": 0.09645, "acc": 94.43359, "loss_meta_cls": 0.13673, "meta_acc": 11.6, "loss_vae": 0.04607, "loss": 0.57053, "time": 0.25586}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.001, "memory": 2010, "data_time": 0.04149, "loss_rpn_cls": 0.05624, "loss_rpn_bbox": 0.07663, "loss_cls": 0.14622, "loss_bbox": 0.08981, "acc": 94.8125, "loss_meta_cls": 0.13634, "meta_acc": 12.9, "loss_vae": 0.04594, "loss": 0.55119, "time": 0.2569}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.001, "memory": 2010, "data_time": 0.04156, "loss_rpn_cls": 0.05534, "loss_rpn_bbox": 0.07282, "loss_cls": 0.14856, "loss_bbox": 0.09567, "acc": 94.94141, "loss_meta_cls": 0.13588, "meta_acc": 11.9, "loss_vae": 0.04584, "loss": 0.55411, "time": 0.24893}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.001, "memory": 2010, "data_time": 0.0417, "loss_rpn_cls": 0.06761, "loss_rpn_bbox": 0.07814, "loss_cls": 0.15309, "loss_bbox": 0.08788, "acc": 94.72656, "loss_meta_cls": 0.13544, "meta_acc": 13.0, "loss_vae": 0.046, "loss": 0.56816, "time": 0.25696}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.001, "memory": 2010, "data_time": 0.04285, "loss_rpn_cls": 0.05088, "loss_rpn_bbox": 0.07467, "loss_cls": 0.1492, "loss_bbox": 0.0879, "acc": 94.89062, "loss_meta_cls": 0.13598, "meta_acc": 12.9, "loss_vae": 0.04584, "loss": 0.54448, "time": 0.28146}
{"mode": "val", "epoch": 1, "iter": 4952, "lr": 0.001, "AP50": 0.694, "BASE_CLASSES_SPLIT1: AP50": 0.714, "NOVEL_CLASSES_SPLIT1: AP50": 0.635, "mAP": 0.69401}
