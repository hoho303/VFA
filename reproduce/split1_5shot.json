{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.10.0\nMMCV: 1.6.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.24.0+8d3363e", "config": "img_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_multi_pipelines = dict(\n    query=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations', with_bbox=True),\n        dict(\n            type='Resize',\n            img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),\n                       (1333, 608), (1333, 640), (1333, 672), (1333, 704),\n                       (1333, 736), (1333, 768), (1333, 800)],\n            keep_ratio=True,\n            multiscale_mode='value'),\n        dict(type='RandomFlip', flip_ratio=0.5),\n        dict(\n            type='Normalize',\n            mean=[103.53, 116.28, 123.675],\n            std=[1.0, 1.0, 1.0],\n            to_rgb=False),\n        dict(type='Pad', size_divisor=32),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n    ],\n    support=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations', with_bbox=True),\n        dict(\n            type='Normalize',\n            mean=[103.53, 116.28, 123.675],\n            std=[1.0, 1.0, 1.0],\n            to_rgb=False),\n        dict(type='GenerateMask', target_size=(224, 224)),\n        dict(type='RandomFlip', flip_ratio=0.0),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n    ])\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata_root = 'data/VOCdevkit/'\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='NWayKShotDataset',\n        num_support_ways=20,\n        num_support_shots=1,\n        one_support_shot_per_image=False,\n        num_used_support_shots=30,\n        save_dataset=True,\n        dataset=dict(\n            type='FewShotVOCDefaultDataset',\n            ann_cfg=[dict(method='MetaRCNN', setting='SPLIT1_5SHOT')],\n            img_prefix='data/VOCdevkit/',\n            multi_pipelines=dict(\n                query=[\n                    dict(type='LoadImageFromFile'),\n                    dict(type='LoadAnnotations', with_bbox=True),\n                    dict(\n                        type='Resize',\n                        img_scale=[(1333, 480), (1333, 512), (1333, 544),\n                                   (1333, 576), (1333, 608), (1333, 640),\n                                   (1333, 672), (1333, 704), (1333, 736),\n                                   (1333, 768), (1333, 800)],\n                        keep_ratio=True,\n                        multiscale_mode='value'),\n                    dict(type='RandomFlip', flip_ratio=0.5),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n                ],\n                support=[\n                    dict(type='LoadImageFromFile'),\n                    dict(type='LoadAnnotations', with_bbox=True),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='GenerateMask', target_size=(224, 224)),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n                ]),\n            classes='ALL_CLASSES_SPLIT1',\n            use_difficult=False,\n            instance_wise=False,\n            dataset_name='query_support_dataset',\n            num_novel_shots=5,\n            num_base_shots=5)),\n    val=dict(\n        type='FewShotVOCDataset',\n        ann_cfg=[\n            dict(\n                type='ann_file',\n                ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/test.txt')\n        ],\n        img_prefix='data/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes='ALL_CLASSES_SPLIT1'),\n    test=dict(\n        type='FewShotVOCDataset',\n        ann_cfg=[\n            dict(\n                type='ann_file',\n                ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/test.txt')\n        ],\n        img_prefix='data/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        test_mode=True,\n        classes='ALL_CLASSES_SPLIT1'),\n    model_init=dict(\n        copy_from_train_dataset=True,\n        samples_per_gpu=16,\n        workers_per_gpu=1,\n        type='FewShotVOCDataset',\n        ann_cfg=None,\n        img_prefix='data/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='GenerateMask', target_size=(224, 224)),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        use_difficult=False,\n        instance_wise=True,\n        num_novel_shots=None,\n        classes='ALL_CLASSES_SPLIT1',\n        dataset_name='model_init_dataset'))\nevaluation = dict(\n    interval=1600,\n    metric='mAP',\n    class_splits=['BASE_CLASSES_SPLIT1', 'NOVEL_CLASSES_SPLIT1'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup=None,\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[60000, 80000])\nrunner = dict(type='IterBasedRunner', max_iters=1600)\nnorm_cfg = dict(type='BN', requires_grad=False)\npretrained = 'open-mmlab://detectron2/resnet101_caffe'\nmodel = dict(\n    type='VFA',\n    pretrained='open-mmlab://detectron2/resnet101_caffe',\n    backbone=dict(\n        type='ResNetWithMetaConv',\n        depth=101,\n        num_stages=3,\n        strides=(1, 2, 2),\n        dilations=(1, 1, 1),\n        out_indices=(2, ),\n        frozen_stages=2,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=1024,\n        feat_channels=512,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[2, 4, 8, 16, 32],\n            ratios=[0.5, 1.0, 2.0],\n            scale_major=False,\n            strides=[16]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='VFARoIHead',\n        shared_head=dict(\n            type='MetaRCNNResLayer',\n            pretrained='open-mmlab://detectron2/resnet101_caffe',\n            depth=50,\n            stage=3,\n            stride=2,\n            dilation=1,\n            style='caffe',\n            norm_cfg=dict(type='BN', requires_grad=False),\n            norm_eval=True),\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=1024,\n            featmap_strides=[16]),\n        bbox_head=dict(\n            type='VFABBoxHead',\n            with_avg_pool=False,\n            roi_feat_size=1,\n            in_channels=2048,\n            num_classes=20,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='SmoothL1Loss', loss_weight=1.0),\n            num_meta_classes=20,\n            meta_cls_in_channels=2048,\n            with_meta_cls_loss=True,\n            loss_meta=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        aggregation_layer=dict(\n            type='AggregationLayer',\n            aggregator_cfgs=[\n                dict(\n                    type='DotProductAggregator',\n                    in_channels=2048,\n                    with_fc=False)\n            ]),\n        novel_class=(15, 16, 17, 18, 19),\n        base_class=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=12000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=128,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=6000,\n            max_per_img=300,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.3),\n            max_per_img=100)),\n    frozen_parameters=[\n        'backbone', 'shared_head', 'aggregation_layer', 'rpn_head'\n    ])\ncustom_imports = dict(\n    imports=['vfa.vfa_detector', 'vfa.vfa_roi_head', 'vfa.vfa_bbox_head'],\n    allow_failed_imports=False)\ncheckpoint_config = dict(interval=1600)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'work_dirs/vfa_r101_c4_8xb4_voc-split1_base-training/iter_18000.pth'\nresume_from = None\nworkflow = [('train', 1)]\nuse_infinite_sampler = True\nseed = 42\nwork_dir = './work_dirs/vfa_r101_c4_8xb4_voc-split1_5shot-fine-tuning'\ngpu_ids = range(0, 1)\n", "seed": 42, "exp_name": "vfa_r101_c4_8xb4_voc-split1_5shot-fine-tuning.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.001, "memory": 1977, "data_time": 0.04833, "loss_rpn_cls": 0.04892, "loss_rpn_bbox": 0.07939, "loss_cls": 1.06116, "loss_bbox": 0.42471, "acc": 78.16797, "loss_meta_cls": 0.15058, "meta_acc": 7.3, "loss_vae": 0.04701, "loss": 1.81177, "time": 0.31942}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.001, "memory": 1977, "data_time": 0.04331, "loss_rpn_cls": 0.05679, "loss_rpn_bbox": 0.06933, "loss_cls": 0.62583, "loss_bbox": 0.39445, "acc": 82.73047, "loss_meta_cls": 0.14816, "meta_acc": 7.6, "loss_vae": 0.04675, "loss": 1.34132, "time": 0.25931}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.001, "memory": 2002, "data_time": 0.04294, "loss_rpn_cls": 0.04935, "loss_rpn_bbox": 0.07111, "loss_cls": 0.49707, "loss_bbox": 0.35982, "acc": 85.56641, "loss_meta_cls": 0.14689, "meta_acc": 8.3, "loss_vae": 0.04688, "loss": 1.17113, "time": 0.26195}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "memory": 2002, "data_time": 0.04277, "loss_rpn_cls": 0.05322, "loss_rpn_bbox": 0.07602, "loss_cls": 0.42949, "loss_bbox": 0.34581, "acc": 88.08594, "loss_meta_cls": 0.1453, "meta_acc": 10.0, "loss_vae": 0.04667, "loss": 1.09651, "time": 0.2594}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.001, "memory": 2002, "data_time": 0.04287, "loss_rpn_cls": 0.05208, "loss_rpn_bbox": 0.06137, "loss_cls": 0.37003, "loss_bbox": 0.31765, "acc": 89.98047, "loss_meta_cls": 0.14443, "meta_acc": 10.7, "loss_vae": 0.04672, "loss": 0.99227, "time": 0.26172}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.001, "memory": 2002, "data_time": 0.04227, "loss_rpn_cls": 0.06137, "loss_rpn_bbox": 0.07693, "loss_cls": 0.33143, "loss_bbox": 0.30178, "acc": 91.19922, "loss_meta_cls": 0.14312, "meta_acc": 10.8, "loss_vae": 0.04669, "loss": 0.96132, "time": 0.25916}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.001, "memory": 2002, "data_time": 0.04345, "loss_rpn_cls": 0.06394, "loss_rpn_bbox": 0.09137, "loss_cls": 0.29167, "loss_bbox": 0.27188, "acc": 92.34375, "loss_meta_cls": 0.1429, "meta_acc": 10.6, "loss_vae": 0.04654, "loss": 0.9083, "time": 0.26602}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.001, "memory": 2002, "data_time": 0.04293, "loss_rpn_cls": 0.05447, "loss_rpn_bbox": 0.0701, "loss_cls": 0.27378, "loss_bbox": 0.26503, "acc": 92.46875, "loss_meta_cls": 0.14187, "meta_acc": 11.4, "loss_vae": 0.04664, "loss": 0.85189, "time": 0.26634}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.001, "memory": 2002, "data_time": 0.04242, "loss_rpn_cls": 0.05931, "loss_rpn_bbox": 0.0852, "loss_cls": 0.25386, "loss_bbox": 0.24502, "acc": 92.97266, "loss_meta_cls": 0.14106, "meta_acc": 11.1, "loss_vae": 0.04653, "loss": 0.831, "time": 0.26617}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.001, "memory": 2002, "data_time": 0.0424, "loss_rpn_cls": 0.05544, "loss_rpn_bbox": 0.06387, "loss_cls": 0.22956, "loss_bbox": 0.22248, "acc": 93.51562, "loss_meta_cls": 0.1403, "meta_acc": 10.9, "loss_vae": 0.0467, "loss": 0.75834, "time": 0.2633}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 2002, "data_time": 0.04243, "loss_rpn_cls": 0.05504, "loss_rpn_bbox": 0.07012, "loss_cls": 0.22144, "loss_bbox": 0.2113, "acc": 93.73438, "loss_meta_cls": 0.14038, "meta_acc": 11.0, "loss_vae": 0.04649, "loss": 0.74477, "time": 0.26779}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 2002, "data_time": 0.04187, "loss_rpn_cls": 0.04593, "loss_rpn_bbox": 0.06521, "loss_cls": 0.21716, "loss_bbox": 0.20376, "acc": 93.52734, "loss_meta_cls": 0.13954, "meta_acc": 10.2, "loss_vae": 0.04653, "loss": 0.71814, "time": 0.26224}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 2010, "data_time": 0.04137, "loss_rpn_cls": 0.05404, "loss_rpn_bbox": 0.06633, "loss_cls": 0.2047, "loss_bbox": 0.19215, "acc": 93.94922, "loss_meta_cls": 0.13884, "meta_acc": 11.7, "loss_vae": 0.04646, "loss": 0.70252, "time": 0.26053}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 2010, "data_time": 0.04301, "loss_rpn_cls": 0.05041, "loss_rpn_bbox": 0.06985, "loss_cls": 0.19662, "loss_bbox": 0.1781, "acc": 94.02344, "loss_meta_cls": 0.1388, "meta_acc": 12.1, "loss_vae": 0.04649, "loss": 0.68027, "time": 0.26195}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 2010, "data_time": 0.0409, "loss_rpn_cls": 0.0572, "loss_rpn_bbox": 0.0745, "loss_cls": 0.18887, "loss_bbox": 0.16685, "acc": 94.17969, "loss_meta_cls": 0.13801, "meta_acc": 11.0, "loss_vae": 0.04639, "loss": 0.67183, "time": 0.25912}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 2010, "data_time": 0.04138, "loss_rpn_cls": 0.05531, "loss_rpn_bbox": 0.0704, "loss_cls": 0.18676, "loss_bbox": 0.15836, "acc": 94.23828, "loss_meta_cls": 0.13767, "meta_acc": 12.5, "loss_vae": 0.04637, "loss": 0.65488, "time": 0.25957}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.001, "memory": 2019, "data_time": 0.04236, "loss_rpn_cls": 0.05425, "loss_rpn_bbox": 0.08171, "loss_cls": 0.18905, "loss_bbox": 0.15409, "acc": 94.12109, "loss_meta_cls": 0.13696, "meta_acc": 11.2, "loss_vae": 0.04647, "loss": 0.66252, "time": 0.26501}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 2019, "data_time": 0.04199, "loss_rpn_cls": 0.0606, "loss_rpn_bbox": 0.07698, "loss_cls": 0.17794, "loss_bbox": 0.14975, "acc": 94.49609, "loss_meta_cls": 0.1376, "meta_acc": 11.8, "loss_vae": 0.04632, "loss": 0.64919, "time": 0.25825}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.001, "memory": 2019, "data_time": 0.04259, "loss_rpn_cls": 0.05345, "loss_rpn_bbox": 0.07374, "loss_cls": 0.17266, "loss_bbox": 0.13158, "acc": 94.55469, "loss_meta_cls": 0.13651, "meta_acc": 10.6, "loss_vae": 0.04645, "loss": 0.61438, "time": 0.25857}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 2019, "data_time": 0.04084, "loss_rpn_cls": 0.06538, "loss_rpn_bbox": 0.07866, "loss_cls": 0.16827, "loss_bbox": 0.13287, "acc": 94.76953, "loss_meta_cls": 0.13668, "meta_acc": 10.8, "loss_vae": 0.04628, "loss": 0.62814, "time": 0.25806}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.001, "memory": 2019, "data_time": 0.04109, "loss_rpn_cls": 0.05922, "loss_rpn_bbox": 0.07926, "loss_cls": 0.15791, "loss_bbox": 0.12341, "acc": 95.03906, "loss_meta_cls": 0.13608, "meta_acc": 10.8, "loss_vae": 0.04638, "loss": 0.60226, "time": 0.25888}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 2019, "data_time": 0.04157, "loss_rpn_cls": 0.05124, "loss_rpn_bbox": 0.06785, "loss_cls": 0.16372, "loss_bbox": 0.11836, "acc": 94.75, "loss_meta_cls": 0.13618, "meta_acc": 10.9, "loss_vae": 0.04627, "loss": 0.58361, "time": 0.25925}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.001, "memory": 2019, "data_time": 0.04183, "loss_rpn_cls": 0.05054, "loss_rpn_bbox": 0.07176, "loss_cls": 0.15256, "loss_bbox": 0.11363, "acc": 95.05078, "loss_meta_cls": 0.13536, "meta_acc": 12.0, "loss_vae": 0.04632, "loss": 0.57016, "time": 0.25916}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 2019, "data_time": 0.04063, "loss_rpn_cls": 0.05521, "loss_rpn_bbox": 0.08678, "loss_cls": 0.16206, "loss_bbox": 0.11839, "acc": 94.91016, "loss_meta_cls": 0.13557, "meta_acc": 12.4, "loss_vae": 0.04624, "loss": 0.60424, "time": 0.2487}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.001, "memory": 2019, "data_time": 0.03982, "loss_rpn_cls": 0.05677, "loss_rpn_bbox": 0.07167, "loss_cls": 0.14906, "loss_bbox": 0.10753, "acc": 95.23047, "loss_meta_cls": 0.13521, "meta_acc": 11.7, "loss_vae": 0.04624, "loss": 0.56648, "time": 0.24794}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.001, "memory": 2019, "data_time": 0.04078, "loss_rpn_cls": 0.05573, "loss_rpn_bbox": 0.07755, "loss_cls": 0.1518, "loss_bbox": 0.10512, "acc": 95.19531, "loss_meta_cls": 0.13474, "meta_acc": 12.3, "loss_vae": 0.04626, "loss": 0.5712, "time": 0.25042}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.001, "memory": 2019, "data_time": 0.04219, "loss_rpn_cls": 0.05432, "loss_rpn_bbox": 0.08059, "loss_cls": 0.14301, "loss_bbox": 0.0979, "acc": 95.26562, "loss_meta_cls": 0.13498, "meta_acc": 13.1, "loss_vae": 0.04618, "loss": 0.55697, "time": 0.25571}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.001, "memory": 2019, "data_time": 0.03978, "loss_rpn_cls": 0.04725, "loss_rpn_bbox": 0.06192, "loss_cls": 0.14531, "loss_bbox": 0.09502, "acc": 95.15234, "loss_meta_cls": 0.13389, "meta_acc": 11.3, "loss_vae": 0.0464, "loss": 0.52978, "time": 0.24819}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.001, "memory": 2019, "data_time": 0.04068, "loss_rpn_cls": 0.06128, "loss_rpn_bbox": 0.07293, "loss_cls": 0.14173, "loss_bbox": 0.09619, "acc": 95.46094, "loss_meta_cls": 0.13498, "meta_acc": 11.0, "loss_vae": 0.04613, "loss": 0.55324, "time": 0.25085}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.001, "memory": 2019, "data_time": 0.04058, "loss_rpn_cls": 0.05681, "loss_rpn_bbox": 0.06882, "loss_cls": 0.14264, "loss_bbox": 0.09243, "acc": 95.27344, "loss_meta_cls": 0.13412, "meta_acc": 10.6, "loss_vae": 0.04626, "loss": 0.54109, "time": 0.25952}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.001, "memory": 2019, "data_time": 0.04129, "loss_rpn_cls": 0.05821, "loss_rpn_bbox": 0.07416, "loss_cls": 0.13839, "loss_bbox": 0.08764, "acc": 95.36328, "loss_meta_cls": 0.13395, "meta_acc": 12.2, "loss_vae": 0.04606, "loss": 0.53841, "time": 0.25421}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.001, "memory": 2019, "data_time": 0.04015, "loss_rpn_cls": 0.05909, "loss_rpn_bbox": 0.07874, "loss_cls": 0.14237, "loss_bbox": 0.08852, "acc": 95.23047, "loss_meta_cls": 0.13389, "meta_acc": 10.5, "loss_vae": 0.04627, "loss": 0.54888, "time": 0.27193}
{"mode": "val", "epoch": 1, "iter": 4952, "lr": 0.001, "AP50": 0.676, "BASE_CLASSES_SPLIT1: AP50": 0.692, "NOVEL_CLASSES_SPLIT1: AP50": 0.627, "mAP": 0.6757}
