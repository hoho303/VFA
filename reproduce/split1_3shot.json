{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.10.0\nMMCV: 1.6.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.24.0+8d3363e", "config": "img_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_multi_pipelines = dict(\n    query=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations', with_bbox=True),\n        dict(\n            type='Resize',\n            img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),\n                       (1333, 608), (1333, 640), (1333, 672), (1333, 704),\n                       (1333, 736), (1333, 768), (1333, 800)],\n            keep_ratio=True,\n            multiscale_mode='value'),\n        dict(type='RandomFlip', flip_ratio=0.5),\n        dict(\n            type='Normalize',\n            mean=[103.53, 116.28, 123.675],\n            std=[1.0, 1.0, 1.0],\n            to_rgb=False),\n        dict(type='Pad', size_divisor=32),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n    ],\n    support=[\n        dict(type='LoadImageFromFile'),\n        dict(type='LoadAnnotations', with_bbox=True),\n        dict(\n            type='Normalize',\n            mean=[103.53, 116.28, 123.675],\n            std=[1.0, 1.0, 1.0],\n            to_rgb=False),\n        dict(type='GenerateMask', target_size=(224, 224)),\n        dict(type='RandomFlip', flip_ratio=0.0),\n        dict(type='DefaultFormatBundle'),\n        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n    ])\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata_root = 'data/VOCdevkit/'\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='NWayKShotDataset',\n        num_support_ways=20,\n        num_support_shots=1,\n        one_support_shot_per_image=False,\n        num_used_support_shots=30,\n        save_dataset=True,\n        dataset=dict(\n            type='FewShotVOCDefaultDataset',\n            ann_cfg=[dict(method='MetaRCNN', setting='SPLIT1_3SHOT')],\n            img_prefix='data/VOCdevkit/',\n            multi_pipelines=dict(\n                query=[\n                    dict(type='LoadImageFromFile'),\n                    dict(type='LoadAnnotations', with_bbox=True),\n                    dict(\n                        type='Resize',\n                        img_scale=[(1333, 480), (1333, 512), (1333, 544),\n                                   (1333, 576), (1333, 608), (1333, 640),\n                                   (1333, 672), (1333, 704), (1333, 736),\n                                   (1333, 768), (1333, 800)],\n                        keep_ratio=True,\n                        multiscale_mode='value'),\n                    dict(type='RandomFlip', flip_ratio=0.5),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n                ],\n                support=[\n                    dict(type='LoadImageFromFile'),\n                    dict(type='LoadAnnotations', with_bbox=True),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='GenerateMask', target_size=(224, 224)),\n                    dict(type='RandomFlip', flip_ratio=0.0),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n                ]),\n            classes='ALL_CLASSES_SPLIT1',\n            use_difficult=False,\n            instance_wise=False,\n            dataset_name='query_support_dataset',\n            num_novel_shots=3,\n            num_base_shots=3)),\n    val=dict(\n        type='FewShotVOCDataset',\n        ann_cfg=[\n            dict(\n                type='ann_file',\n                ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/test.txt')\n        ],\n        img_prefix='data/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes='ALL_CLASSES_SPLIT1'),\n    test=dict(\n        type='FewShotVOCDataset',\n        ann_cfg=[\n            dict(\n                type='ann_file',\n                ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/test.txt')\n        ],\n        img_prefix='data/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        test_mode=True,\n        classes='ALL_CLASSES_SPLIT1'),\n    model_init=dict(\n        copy_from_train_dataset=True,\n        samples_per_gpu=16,\n        workers_per_gpu=1,\n        type='FewShotVOCDataset',\n        ann_cfg=None,\n        img_prefix='data/VOCdevkit/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='GenerateMask', target_size=(224, 224)),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        use_difficult=False,\n        instance_wise=True,\n        num_novel_shots=None,\n        classes='ALL_CLASSES_SPLIT1',\n        dataset_name='model_init_dataset'))\nevaluation = dict(\n    interval=1200,\n    metric='mAP',\n    class_splits=['BASE_CLASSES_SPLIT1', 'NOVEL_CLASSES_SPLIT1'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup=None,\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[60000, 80000])\nrunner = dict(type='IterBasedRunner', max_iters=1200)\nnorm_cfg = dict(type='BN', requires_grad=False)\npretrained = 'open-mmlab://detectron2/resnet101_caffe'\nmodel = dict(\n    type='VFA',\n    pretrained='open-mmlab://detectron2/resnet101_caffe',\n    backbone=dict(\n        type='ResNetWithMetaConv',\n        depth=101,\n        num_stages=3,\n        strides=(1, 2, 2),\n        dilations=(1, 1, 1),\n        out_indices=(2, ),\n        frozen_stages=2,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=1024,\n        feat_channels=512,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[2, 4, 8, 16, 32],\n            ratios=[0.5, 1.0, 2.0],\n            scale_major=False,\n            strides=[16]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='VFARoIHead',\n        shared_head=dict(\n            type='MetaRCNNResLayer',\n            pretrained='open-mmlab://detectron2/resnet101_caffe',\n            depth=50,\n            stage=3,\n            stride=2,\n            dilation=1,\n            style='caffe',\n            norm_cfg=dict(type='BN', requires_grad=False),\n            norm_eval=True),\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=1024,\n            featmap_strides=[16]),\n        bbox_head=dict(\n            type='VFABBoxHead',\n            with_avg_pool=False,\n            roi_feat_size=1,\n            in_channels=2048,\n            num_classes=20,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='SmoothL1Loss', loss_weight=1.0),\n            num_meta_classes=20,\n            meta_cls_in_channels=2048,\n            with_meta_cls_loss=True,\n            loss_meta=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        aggregation_layer=dict(\n            type='AggregationLayer',\n            aggregator_cfgs=[\n                dict(\n                    type='DotProductAggregator',\n                    in_channels=2048,\n                    with_fc=False)\n            ]),\n        novel_class=(15, 16, 17, 18, 19),\n        base_class=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=12000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=128,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=6000,\n            max_per_img=300,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.3),\n            max_per_img=100)),\n    frozen_parameters=[\n        'backbone', 'shared_head', 'aggregation_layer', 'rpn_head'\n    ])\ncustom_imports = dict(\n    imports=['vfa.vfa_detector', 'vfa.vfa_roi_head', 'vfa.vfa_bbox_head'],\n    allow_failed_imports=False)\ncheckpoint_config = dict(interval=1200)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'work_dirs/vfa_r101_c4_8xb4_voc-split1_base-training/iter_18000.pth'\nresume_from = None\nworkflow = [('train', 1)]\nuse_infinite_sampler = True\nseed = 42\nwork_dir = './work_dirs/vfa_r101_c4_8xb4_voc-split1_3shot-fine-tuning'\ngpu_ids = range(0, 1)\n", "seed": 42, "exp_name": "vfa_r101_c4_8xb4_voc-split1_3shot-fine-tuning.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.001, "memory": 1989, "data_time": 0.04633, "loss_rpn_cls": 0.06102, "loss_rpn_bbox": 0.07852, "loss_cls": 1.05429, "loss_bbox": 0.42438, "acc": 77.49609, "loss_meta_cls": 0.15018, "meta_acc": 7.4, "loss_vae": 0.04713, "loss": 1.81552, "time": 0.31373}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.001, "memory": 1989, "data_time": 0.04297, "loss_rpn_cls": 0.05235, "loss_rpn_bbox": 0.07493, "loss_cls": 0.60255, "loss_bbox": 0.38865, "acc": 83.14062, "loss_meta_cls": 0.14745, "meta_acc": 9.3, "loss_vae": 0.04723, "loss": 1.31316, "time": 0.26088}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.001, "memory": 1989, "data_time": 0.0416, "loss_rpn_cls": 0.06178, "loss_rpn_bbox": 0.07724, "loss_cls": 0.48349, "loss_bbox": 0.35938, "acc": 85.96094, "loss_meta_cls": 0.14507, "meta_acc": 11.8, "loss_vae": 0.04721, "loss": 1.17418, "time": 0.25682}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "memory": 1989, "data_time": 0.0402, "loss_rpn_cls": 0.05571, "loss_rpn_bbox": 0.07471, "loss_cls": 0.41031, "loss_bbox": 0.34408, "acc": 88.52344, "loss_meta_cls": 0.14328, "meta_acc": 12.5, "loss_vae": 0.04698, "loss": 1.07507, "time": 0.24861}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.001, "memory": 1990, "data_time": 0.03987, "loss_rpn_cls": 0.04591, "loss_rpn_bbox": 0.07544, "loss_cls": 0.33954, "loss_bbox": 0.30502, "acc": 90.77344, "loss_meta_cls": 0.14201, "meta_acc": 11.8, "loss_vae": 0.04698, "loss": 0.95491, "time": 0.24676}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.001, "memory": 1990, "data_time": 0.0408, "loss_rpn_cls": 0.05084, "loss_rpn_bbox": 0.07626, "loss_cls": 0.29836, "loss_bbox": 0.28499, "acc": 91.55469, "loss_meta_cls": 0.14061, "meta_acc": 12.5, "loss_vae": 0.04695, "loss": 0.898, "time": 0.24988}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.001, "memory": 1990, "data_time": 0.04248, "loss_rpn_cls": 0.05143, "loss_rpn_bbox": 0.08338, "loss_cls": 0.27088, "loss_bbox": 0.2569, "acc": 92.64453, "loss_meta_cls": 0.13946, "meta_acc": 11.7, "loss_vae": 0.04706, "loss": 0.8491, "time": 0.25895}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.001, "memory": 1990, "data_time": 0.04148, "loss_rpn_cls": 0.05051, "loss_rpn_bbox": 0.07133, "loss_cls": 0.2468, "loss_bbox": 0.25009, "acc": 93.02344, "loss_meta_cls": 0.13822, "meta_acc": 14.3, "loss_vae": 0.04686, "loss": 0.80381, "time": 0.25836}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.001, "memory": 1994, "data_time": 0.04135, "loss_rpn_cls": 0.06299, "loss_rpn_bbox": 0.07995, "loss_cls": 0.22629, "loss_bbox": 0.23033, "acc": 93.6875, "loss_meta_cls": 0.13733, "meta_acc": 12.4, "loss_vae": 0.04691, "loss": 0.78381, "time": 0.25364}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.001, "memory": 1994, "data_time": 0.04062, "loss_rpn_cls": 0.04899, "loss_rpn_bbox": 0.07175, "loss_cls": 0.20702, "loss_bbox": 0.20891, "acc": 94.23828, "loss_meta_cls": 0.13669, "meta_acc": 13.8, "loss_vae": 0.0469, "loss": 0.72026, "time": 0.25774}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 1994, "data_time": 0.04085, "loss_rpn_cls": 0.04919, "loss_rpn_bbox": 0.07971, "loss_cls": 0.20368, "loss_bbox": 0.19357, "acc": 94.3125, "loss_meta_cls": 0.13568, "meta_acc": 14.2, "loss_vae": 0.0469, "loss": 0.70872, "time": 0.25866}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 1994, "data_time": 0.0416, "loss_rpn_cls": 0.05437, "loss_rpn_bbox": 0.07505, "loss_cls": 0.18531, "loss_bbox": 0.17834, "acc": 94.45312, "loss_meta_cls": 0.1349, "meta_acc": 12.8, "loss_vae": 0.04676, "loss": 0.67472, "time": 0.25785}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 1994, "data_time": 0.04093, "loss_rpn_cls": 0.04962, "loss_rpn_bbox": 0.07422, "loss_cls": 0.18301, "loss_bbox": 0.16918, "acc": 94.58203, "loss_meta_cls": 0.1341, "meta_acc": 12.5, "loss_vae": 0.04681, "loss": 0.65694, "time": 0.25314}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 1994, "data_time": 0.04023, "loss_rpn_cls": 0.05035, "loss_rpn_bbox": 0.07854, "loss_cls": 0.17216, "loss_bbox": 0.15963, "acc": 95.13672, "loss_meta_cls": 0.13349, "meta_acc": 13.7, "loss_vae": 0.04673, "loss": 0.64091, "time": 0.25351}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 1994, "data_time": 0.03923, "loss_rpn_cls": 0.04666, "loss_rpn_bbox": 0.08012, "loss_cls": 0.16834, "loss_bbox": 0.15181, "acc": 94.92969, "loss_meta_cls": 0.13289, "meta_acc": 12.9, "loss_vae": 0.04677, "loss": 0.6266, "time": 0.24698}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 1994, "data_time": 0.0403, "loss_rpn_cls": 0.05729, "loss_rpn_bbox": 0.07617, "loss_cls": 0.16572, "loss_bbox": 0.14254, "acc": 95.00391, "loss_meta_cls": 0.13212, "meta_acc": 14.4, "loss_vae": 0.04668, "loss": 0.62053, "time": 0.24849}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.001, "memory": 2002, "data_time": 0.04107, "loss_rpn_cls": 0.04785, "loss_rpn_bbox": 0.08679, "loss_cls": 0.15568, "loss_bbox": 0.13293, "acc": 95.27344, "loss_meta_cls": 0.13169, "meta_acc": 14.1, "loss_vae": 0.04677, "loss": 0.60171, "time": 0.25484}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.001, "memory": 2002, "data_time": 0.04283, "loss_rpn_cls": 0.04858, "loss_rpn_bbox": 0.08289, "loss_cls": 0.1521, "loss_bbox": 0.12562, "acc": 95.32422, "loss_meta_cls": 0.13105, "meta_acc": 13.6, "loss_vae": 0.04671, "loss": 0.58695, "time": 0.25989}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.001, "memory": 2002, "data_time": 0.03994, "loss_rpn_cls": 0.04927, "loss_rpn_bbox": 0.07995, "loss_cls": 0.14828, "loss_bbox": 0.11728, "acc": 95.26953, "loss_meta_cls": 0.13065, "meta_acc": 13.2, "loss_vae": 0.04668, "loss": 0.57209, "time": 0.24554}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.001, "memory": 2002, "data_time": 0.03946, "loss_rpn_cls": 0.05818, "loss_rpn_bbox": 0.07487, "loss_cls": 0.1441, "loss_bbox": 0.11134, "acc": 95.37891, "loss_meta_cls": 0.13025, "meta_acc": 15.3, "loss_vae": 0.04661, "loss": 0.56536, "time": 0.24446}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.001, "memory": 2002, "data_time": 0.03981, "loss_rpn_cls": 0.05397, "loss_rpn_bbox": 0.07677, "loss_cls": 0.14158, "loss_bbox": 0.10692, "acc": 95.625, "loss_meta_cls": 0.13003, "meta_acc": 16.3, "loss_vae": 0.04667, "loss": 0.55594, "time": 0.24746}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.001, "memory": 2002, "data_time": 0.04035, "loss_rpn_cls": 0.04722, "loss_rpn_bbox": 0.07022, "loss_cls": 0.13649, "loss_bbox": 0.10284, "acc": 95.57422, "loss_meta_cls": 0.12942, "meta_acc": 15.8, "loss_vae": 0.04656, "loss": 0.53274, "time": 0.25165}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.001, "memory": 2002, "data_time": 0.04042, "loss_rpn_cls": 0.04648, "loss_rpn_bbox": 0.07035, "loss_cls": 0.13647, "loss_bbox": 0.09796, "acc": 95.61328, "loss_meta_cls": 0.12887, "meta_acc": 14.9, "loss_vae": 0.04668, "loss": 0.52682, "time": 0.24985}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.001, "memory": 2002, "data_time": 0.03972, "loss_rpn_cls": 0.05502, "loss_rpn_bbox": 0.07289, "loss_cls": 0.14099, "loss_bbox": 0.10044, "acc": 95.50781, "loss_meta_cls": 0.1285, "meta_acc": 14.5, "loss_vae": 0.04658, "loss": 0.54443, "time": 0.27122}
{"mode": "val", "epoch": 1, "iter": 4952, "lr": 0.001, "AP50": 0.665, "BASE_CLASSES_SPLIT1: AP50": 0.682, "NOVEL_CLASSES_SPLIT1: AP50": 0.612, "mAP": 0.66469}
